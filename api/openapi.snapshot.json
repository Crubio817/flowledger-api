{
  "openapi": "3.0.3",
  "info": {
    "title": "FlowLedger API",
    "version": "0.1.0",
    "description": "API for managing clients, audits, industries, and related business processes"
  },
  "servers": [
    {
      "url": "/",
      "description": "Relative to current host"
    },
    {
      "url": "http://localhost:4001",
      "description": "Local dev server"
    }
  ],
  "tags": [
    {
      "name": "Clients",
      "description": "Client management operations"
    },
    {
      "name": "ClientContacts",
      "description": "Client contact management"
    },
    {
      "name": "ClientDocuments",
      "description": "Client document storage and metadata"
    },
    {
      "name": "ClientEngagements",
      "description": "Engagements per client"
    },
    {
      "name": "ClientIntegrations",
      "description": "External integrations per client"
    },
    {
      "name": "ClientLocations",
      "description": "Client location management"
    },
    {
      "name": "ClientNotes",
      "description": "Client note management"
    },
    {
      "name": "ClientOnboardingTasks",
      "description": "Onboarding task operations"
    },
    {
      "name": "ClientTagMap",
      "description": "Mapping between clients and tags"
    },
    {
      "name": "ClientTags",
      "description": "Client tag management"
    },
    {
      "name": "ContactSocialProfiles",
      "description": "Social media profile management for contacts"
    },
    {
      "name": "Industries",
      "description": "Industry management and client-industry relationships"
    },
    {
      "name": "TaskPacks",
      "description": "Task pack and task management"
    },
    {
      "name": "Audits",
      "description": "Audit management operations"
    },
    {
      "name": "SIPOC",
      "description": "SIPOC documents"
    },
    {
      "name": "Interviews",
      "description": "Interview scheduling and retrieval"
    },
    {
      "name": "Interview Responses",
      "description": "Interview question/answer responses"
    },
    {
      "name": "Findings",
      "description": "Audit findings"
    },
    {
      "name": "Process Maps",
      "description": "Process map files and references"
    },
    {
      "name": "PathTemplates",
      "description": "Reusable audit path templates"
    },
    {
      "name": "PathSteps",
      "description": "Steps within an audit path"
    },
    {
      "name": "Audit Step Progress",
      "description": "Per-step audit progress tracking"
    },
    {
      "name": "Views",
      "description": "Read-only dashboard/overview views"
    },
    {
      "name": "AI",
      "description": "AI-powered features and tools"
    },
    {
      "name": "Auto",
      "description": "Auto-generated/experimental endpoints"
    },
    {
      "name": "Webhooks",
      "description": "Inbound webhook handlers"
    },
    {
      "name": "Misc",
      "description": "Uncategorized endpoints (auto-grouped)"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Clients",
      "tags": [
        "Clients",
        "ClientContacts",
        "ClientDocuments",
        "ClientNotes",
        "ClientIntegrations",
        "ClientLocations",
        "ClientOnboardingTasks",
        "ClientTagMap",
        "ClientTags",
        "ContactSocialProfiles"
      ]
    },
    {
      "name": "Audits",
      "tags": [
        "Audits",
        "SIPOC",
        "Interviews",
        "Interview Responses",
        "Findings",
        "Process Maps",
        "PathTemplates",
        "PathSteps",
        "Audit Step Progress"
      ]
    },
    {
      "name": "Tasks",
      "tags": [
        "TaskPacks"
      ]
    },
    {
      "name": "Views",
      "tags": [
        "Views"
      ]
    },
    {
      "name": "AI",
      "tags": [
        "AI"
      ]
    },
    {
      "name": "Integrations",
      "tags": [
        "Webhooks"
      ]
    },
    {
      "name": "Misc",
      "tags": [
        "Auto",
        "Misc"
      ]
    }
  ],
  "components": {
    "schemas": {
      "ErrorEnvelope": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "code",
              "message"
            ]
          }
        },
        "required": [
          "error"
        ]
      },
      "PageMeta": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "minimum": 1
          },
          "limit": {
            "type": "integer",
            "minimum": 1
          },
          "total": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "page",
          "limit"
        ]
      },
      "DashboardStats": {
        "type": "object",
        "properties": {
          "active_clients": {
            "type": "integer"
          },
          "audits_in_progress": {
            "type": "integer"
          },
          "sipocs_completed": {
            "type": "integer"
          },
          "pending_interviews": {
            "type": "integer"
          }
        },
        "additionalProperties": false
      },
      "RecentAudit": {
        "type": "object",
        "properties": {
          "audit_id": {
            "type": "integer"
          },
          "client_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "last_touched_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "audit_id",
          "client_id",
          "title",
          "status",
          "last_touched_utc"
        ]
      },
      "Audit": {
        "type": "object",
        "properties": {
          "audit_id": {
            "type": "integer"
          },
          "client_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "audit_id",
          "client_id",
          "title"
        ]
      },
      "SipocDoc": {
        "type": "object",
        "properties": {
          "suppliers_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inputs_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "process_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outputs_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customers_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "metrics_json": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "Interview": {
        "type": "object",
        "properties": {
          "interview_id": {
            "type": "integer"
          },
          "audit_id": {
            "type": "integer"
          },
          "persona": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "scheduled_utc": {
            "type": "string",
            "nullable": true,
            "format": "date-time"
          },
          "status": {
            "type": "string"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "interview_id",
          "audit_id",
          "persona"
        ]
      },
      "InterviewResponse": {
        "type": "object",
        "properties": {
          "response_id": {
            "type": "integer"
          },
          "interview_id": {
            "type": "integer"
          },
          "question_id": {
            "type": "string"
          },
          "answer": {
            "type": "string"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "response_id",
          "interview_id",
          "question_id",
          "answer"
        ]
      },
      "Finding": {
        "type": "object",
        "properties": {
          "audit_id": {
            "type": "integer"
          },
          "pain_points_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "opportunities_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "recommendations_json": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "audit_id"
        ]
      },
      "ProcessMap": {
        "type": "object",
        "properties": {
          "process_map_id": {
            "type": "integer"
          },
          "audit_id": {
            "type": "integer"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "blob_path": {
            "type": "string"
          },
          "file_type": {
            "type": "string",
            "nullable": true
          },
          "uploaded_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "process_map_id",
          "audit_id",
          "blob_path"
        ]
      },
      "UploadUrlResponse": {
        "type": "object",
        "properties": {
          "uploadUrl": {
            "type": "string"
          },
          "blob_path": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "uploadUrl",
          "blob_path",
          "contentType"
        ]
      },
      "ClientsOverviewItem": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "integer"
          },
          "client_name": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "primary_contact_name": {
            "type": "string",
            "nullable": true
          },
          "primary_contact_email": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "string",
            "nullable": true,
            "description": "Comma-delimited or JSON string of tags"
          },
          "engagement_count": {
            "type": "integer"
          },
          "pending_onboarding_tasks": {
            "type": "integer"
          },
          "last_activity_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "client_id",
          "client_name",
          "is_active",
          "created_utc"
        ]
      },
      "ClientContact": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "integer"
          },
          "client_id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "is_primary": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ClientContactCreateBody": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "integer"
          },
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "is_primary": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "client_id"
        ]
      },
      "ClientContactUpdateBody": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "is_primary": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "ContactSocialProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "contact_id": {
            "type": "integer"
          },
          "provider": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "is_primary": {
            "type": "boolean"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "id",
          "contact_id",
          "provider",
          "profile_url"
        ]
      },
      "ContactSocialProfileCreateBody": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "integer"
          },
          "provider": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "is_primary": {
            "type": "boolean"
          }
        },
        "required": [
          "contact_id",
          "provider",
          "profile_url"
        ]
      },
      "ContactSocialProfileUpdateBody": {
        "type": "object",
        "properties": {
          "contact_id": {
            "type": "integer"
          },
          "provider": {
            "type": "string"
          },
          "profile_url": {
            "type": "string"
          },
          "is_primary": {
            "type": "boolean"
          }
        }
      },
      "ClientTag": {
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "integer"
          },
          "tag_name": {
            "type": "string"
          }
        },
        "required": [
          "tag_id",
          "tag_name"
        ]
      },
      "ClientTagCreateBody": {
        "type": "object",
        "properties": {
          "tag_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          }
        },
        "required": [
          "tag_name"
        ]
      },
      "ClientTagUpdateBody": {
        "type": "object",
        "properties": {
          "tag_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          }
        }
      },
      "ClientCreateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "is_active": {
            "type": "boolean"
          },
          "logo_url": {
            "type": "string",
            "maxLength": 512,
            "nullable": true,
            "description": "Public URL to the client logo (no file upload stored)"
          }
        },
        "required": [
          "name"
        ]
      },
      "ClientUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "is_active": {
            "type": "boolean"
          },
          "logo_url": {
            "type": "string",
            "maxLength": 512,
            "nullable": true,
            "description": "Public URL to the client logo (no file upload stored)"
          }
        }
      },
      "CreateProcBody": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200,
            "description": "The client's name (required)"
          },
          "is_active": {
            "type": "boolean",
            "description": "Whether the client is active (1) or a prospect (0). Defaults to true if not provided."
          },
          "pack_code": {
            "type": "string",
            "maxLength": 64,
            "nullable": true,
            "description": "A code for onboarding task packs. If not provided, falls back to default tasks."
          },
          "logo_url": {
            "type": "string",
            "maxLength": 512,
            "nullable": true,
            "description": "URL to the client's logo image"
          },
          "contacts_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactJsonItem"
            },
            "nullable": true,
            "description": "Array of contact objects to create for the client"
          },
          "documents_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentJsonItem"
            },
            "nullable": true,
            "description": "Array of document objects to create for the client"
          },
          "industries_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryJsonItem"
            },
            "nullable": true,
            "description": "Array of industry associations to create for the client"
          },
          "integrations_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IntegrationJsonItem"
            },
            "nullable": true,
            "description": "Array of integration objects to create for the client"
          },
          "locations_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationJsonItem"
            },
            "nullable": true,
            "description": "Array of location objects to create for the client"
          },
          "notes_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoteJsonItem"
            },
            "nullable": true,
            "description": "Array of note objects to create for the client"
          },
          "engagement_tags_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngagementTagJsonItem"
            },
            "nullable": true,
            "description": "Array of engagement tag associations (only applies if client is active)"
          },
          "contact_social_profiles_json": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactSocialProfileJsonItem"
            },
            "nullable": true,
            "description": "Array of social profile objects to create for contacts (requires temp_contact_key from contacts_json)"
          }
        },
        "description": "Request body for creating a client via stored procedure sp_create_client. Supports dynamic parameter binding with detailed JSON payloads for related entities."
      },
      "ContactJsonItem": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "maxLength": 200,
            "nullable": true
          },
          "last_name": {
            "type": "string",
            "maxLength": 200,
            "nullable": true
          },
          "email": {
            "type": "string",
            "maxLength": 320,
            "nullable": true
          },
          "phone": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "nullable": true
          },
          "is_primary": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "temp_contact_key": {
            "type": "string",
            "maxLength": 200,
            "nullable": true,
            "description": "Temporary key to link with social profiles"
          }
        }
      },
      "DocumentJsonItem": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "maxLength": 100
          },
          "filename": {
            "type": "string",
            "maxLength": 260
          },
          "blob_url": {
            "type": "string",
            "maxLength": 1000
          },
          "uploaded_by_user": {
            "type": "integer"
          },
          "uploaded_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "IndustryJsonItem": {
        "type": "object",
        "properties": {
          "industry_id": {
            "type": "integer"
          },
          "is_primary": {
            "type": "boolean"
          }
        }
      },
      "IntegrationJsonItem": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "type": "string",
            "maxLength": 50
          },
          "external_account_id": {
            "type": "string",
            "maxLength": 200
          },
          "secret_ref": {
            "type": "string",
            "maxLength": 200
          }
        }
      },
      "LocationJsonItem": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "maxLength": 200
          },
          "line1": {
            "type": "string",
            "maxLength": 200
          },
          "line2": {
            "type": "string",
            "maxLength": 200,
            "nullable": true
          },
          "city": {
            "type": "string",
            "maxLength": 100
          },
          "state_province": {
            "type": "string",
            "maxLength": 100
          },
          "postal_code": {
            "type": "string",
            "maxLength": 50
          },
          "country": {
            "type": "string",
            "maxLength": 100
          },
          "is_primary": {
            "type": "boolean"
          }
        }
      },
      "NoteJsonItem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 200
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "note_type": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "is_important": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_by": {
            "type": "integer",
            "nullable": true
          },
          "updated_by": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      "EngagementTagJsonItem": {
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "integer"
          }
        }
      },
      "ContactSocialProfileJsonItem": {
        "type": "object",
        "properties": {
          "temp_contact_key": {
            "type": "string",
            "maxLength": 200,
            "nullable": true,
            "description": "Links to contact from contacts_json"
          },
          "provider": {
            "type": "string",
            "maxLength": 100
          },
          "profile_url": {
            "type": "string"
          },
          "is_primary": {
            "type": "boolean"
          }
        }
      },
      "ClientSetupBody": {
        "type": "object",
        "properties": {
          "client_name": {
            "type": "string"
          },
          "playbook_code": {
            "type": "string"
          },
          "owner_user_id": {
            "type": "integer"
          }
        },
        "required": [
          "playbook_code",
          "owner_user_id"
        ]
      },
      "TaskPack": {
        "type": "object",
        "properties": {
          "pack_id": {
            "type": "integer"
          },
          "pack_code": {
            "type": "string"
          },
          "pack_name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status_scope": {
            "type": "string",
            "enum": [
              "active",
              "prospect",
              "any"
            ],
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          },
          "effective_from_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effective_to_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "pack_id",
          "pack_code",
          "pack_name",
          "is_active"
        ]
      },
      "TaskPackCreateBody": {
        "type": "object",
        "properties": {
          "pack_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "pack_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          },
          "status_scope": {
            "type": "string",
            "enum": [
              "active",
              "prospect",
              "any"
            ],
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          },
          "effective_from_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effective_to_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "pack_code",
          "pack_name"
        ]
      },
      "TaskPackUpdateBody": {
        "type": "object",
        "properties": {
          "pack_code": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "pack_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          },
          "status_scope": {
            "type": "string",
            "enum": [
              "active",
              "prospect",
              "any"
            ],
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          },
          "effective_from_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "effective_to_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "PackTask": {
        "type": "object",
        "properties": {
          "pack_task_id": {
            "type": "integer"
          },
          "pack_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "sort_order": {
            "type": "integer",
            "nullable": true
          },
          "due_days": {
            "type": "integer",
            "nullable": true
          },
          "status_scope": {
            "type": "string",
            "maxLength": 20,
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "pack_task_id",
          "pack_id",
          "name",
          "is_active"
        ]
      },
      "PackTaskCreateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "sort_order": {
            "type": "integer",
            "nullable": true
          },
          "due_days": {
            "type": "integer",
            "nullable": true
          },
          "status_scope": {
            "type": "string",
            "maxLength": 20,
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "PackTaskUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "sort_order": {
            "type": "integer",
            "nullable": true
          },
          "due_days": {
            "type": "integer",
            "nullable": true
          },
          "status_scope": {
            "type": "string",
            "maxLength": 20,
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "Industry": {
        "type": "object",
        "properties": {
          "industry_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "required": [
          "industry_id",
          "name",
          "is_active"
        ]
      },
      "IndustryCreateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ]
      },
      "IndustryUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "description": {
            "type": "string",
            "maxLength": 1000,
            "nullable": true
          },
          "is_active": {
            "type": "boolean"
          }
        }
      },
      "ClientIndustry": {
        "type": "object",
        "properties": {
          "client_id": {
            "type": "integer"
          },
          "industry_id": {
            "type": "integer"
          },
          "is_primary": {
            "type": "boolean"
          },
          "industry_name": {
            "type": "string"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "client_id",
          "industry_id"
        ]
      },
      "ClientIndustryCreateBody": {
        "type": "object",
        "properties": {
          "industry_id": {
            "type": "integer"
          },
          "is_primary": {
            "type": "boolean"
          }
        },
        "required": [
          "industry_id"
        ]
      },
      "ClientIndustryUpdateBody": {
        "type": "object",
        "properties": {
          "is_primary": {
            "type": "boolean"
          }
        }
      },
      "ClientNote": {
        "type": "object",
        "properties": {
          "note_id": {
            "type": "integer"
          },
          "client_id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "note_type": {
            "type": "string",
            "nullable": true
          },
          "is_important": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updated_utc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_by": {
            "type": "string",
            "nullable": true
          },
          "updated_by": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "note_id",
          "client_id",
          "title",
          "is_important",
          "is_active"
        ]
      },
      "ClientNoteCreateBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "content": {
            "type": "string",
            "maxLength": 10000,
            "nullable": true
          },
          "note_type": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "is_important": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "created_by": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          }
        },
        "required": [
          "title"
        ]
      },
      "ClientNoteUpdateBody": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 200
          },
          "content": {
            "type": "string",
            "maxLength": 10000,
            "nullable": true
          },
          "note_type": {
            "type": "string",
            "maxLength": 50,
            "nullable": true
          },
          "is_important": {
            "type": "boolean"
          },
          "is_active": {
            "type": "boolean"
          },
          "updated_by": {
            "type": "string",
            "maxLength": 100,
            "nullable": true
          }
        }
      },
      "RateBreakdown": {
        "type": "object",
        "properties": {
          "base_currency": {
            "type": "string"
          },
          "base_amount": {
            "type": "number"
          },
          "premiums": {
            "type": "object",
            "properties": {
              "absolute": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "number"
                    }
                  }
                }
              },
              "percentage": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string"
                    },
                    "percentage": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "scarcity_multiplier": {
            "type": "number"
          },
          "final_amount": {
            "type": "number"
          },
          "precedence_applied": {
            "type": "string"
          },
          "breakdown": {
            "type": "string"
          }
        }
      }
    },
    "paths": {
      "/api/task-packs": {
        "get": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "List task packs",
          "parameters": [
            {
              "name": "status_scope",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": [
                  "active",
                  "prospect",
                  "any"
                ]
              }
            },
            {
              "name": "q",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "include_inactive",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 50
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of task packs",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TaskPack"
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Create task pack",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPackCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Task pack created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/TaskPack"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/task-packs/{pack_id}": {
        "get": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Get task pack by id",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Task pack details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/TaskPack"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Update task pack (full replace)",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPackUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task pack updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/TaskPack"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Update task pack (partial)",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskPackUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Task pack updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/TaskPack"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Delete task pack (soft delete)",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Task pack deleted"
            }
          }
        }
      },
      "/api/task-packs/{pack_id}/tasks": {
        "get": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "List pack tasks",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of pack tasks",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/PackTask"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Create pack task",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackTaskCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Pack task created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/PackTask"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/task-packs/{pack_id}/tasks/{pack_task_id}": {
        "get": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Get pack task by id",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "pack_task_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Pack task details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/PackTask"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Update pack task (full replace)",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "pack_task_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackTaskUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Pack task updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/PackTask"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Update pack task (partial)",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "pack_task_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackTaskUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Pack task updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/PackTask"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "TaskPacks"
          ],
          "summary": "Delete pack task (soft delete)",
          "parameters": [
            {
              "name": "pack_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "pack_task_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Pack task deleted"
            }
          }
        }
      },
      "/api/industries": {
        "get": {
          "tags": [
            "Industries"
          ],
          "summary": "List industries",
          "parameters": [
            {
              "name": "q",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "include_inactive",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 50
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of industries",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Industry"
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Industries"
          ],
          "summary": "Create industry",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Industry created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/industries/{industry_id}": {
        "get": {
          "tags": [
            "Industries"
          ],
          "summary": "Get industry by id",
          "parameters": [
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Industry details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Industries"
          ],
          "summary": "Update industry (full replace)",
          "parameters": [
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Industry updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Industries"
          ],
          "summary": "Update industry (partial)",
          "parameters": [
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Industry updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Industries"
          ],
          "summary": "Delete industry (soft delete)",
          "parameters": [
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Industry deleted"
            }
          }
        }
      },
      "/api/clients/{client_id}/industries": {
        "get": {
          "tags": [
            "Industries"
          ],
          "summary": "List industries for a client",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of client industries",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ClientIndustry"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Industries"
          ],
          "summary": "Add industry to client",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientIndustryCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Industry added to client",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientIndustry"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/clients/{client_id}/industries/{industry_id}": {
        "put": {
          "tags": [
            "Industries"
          ],
          "summary": "Update client industry",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientIndustryUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client industry updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientIndustry"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Industries"
          ],
          "summary": "Update client industry (partial)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientIndustryUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client industry updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientIndustry"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Industries"
          ],
          "summary": "Remove industry from client",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "industry_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Industry removed from client"
            }
          }
        }
      },
      "/api/clients/{client_id}/notes": {
        "get": {
          "tags": [
            "ClientNotes"
          ],
          "summary": "List notes for a client",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "note_type",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "include_inactive",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "important_only",
              "in": "query",
              "schema": {
                "type": "boolean"
              }
            },
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 1
              }
            },
            {
              "name": "page_size",
              "in": "query",
              "schema": {
                "type": "integer",
                "default": 50
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of client notes",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ClientNote"
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "ClientNotes"
          ],
          "summary": "Create client note",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientNoteCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Client note created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientNote"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/clients/{client_id}/notes/{note_id}": {
        "get": {
          "tags": [
            "ClientNotes"
          ],
          "summary": "Get client note by id",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "note_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Client note details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientNote"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "ClientNotes"
          ],
          "summary": "Update client note (full replace)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "note_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientNoteUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client note updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientNote"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "ClientNotes"
          ],
          "summary": "Update client note (partial)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "note_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientNoteUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client note updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientNote"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "ClientNotes"
          ],
          "summary": "Delete client note (soft delete)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            },
            {
              "name": "note_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Client note deleted"
            }
          }
        }
      },
      "/api/clients": {
        "get": {
          "tags": [
            "Clients"
          ],
          "summary": "List clients",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Clients list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "client_id": {
                              "type": "integer"
                            },
                            "name": {
                              "type": "string"
                            },
                            "is_active": {
                              "type": "boolean"
                            },
                            "logo_url": {
                              "type": "string",
                              "nullable": true
                            },
                            "created_utc": {
                              "type": "string",
                              "format": "date-time"
                            }
                          }
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "Clients"
          ],
          "summary": "Create client",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Client created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "is_active": {
                            "type": "boolean"
                          },
                          "logo_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/clients/{client_id}": {
        "get": {
          "tags": [
            "Clients"
          ],
          "summary": "Get client by id",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Client details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "is_active": {
                            "type": "boolean"
                          },
                          "logo_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "Clients"
          ],
          "summary": "Update client (full replace)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "is_active": {
                            "type": "boolean"
                          },
                          "logo_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "Clients"
          ],
          "summary": "Update client (partial)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "is_active": {
                            "type": "boolean"
                          },
                          "logo_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "Clients"
          ],
          "summary": "Delete client (soft delete)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Client deleted"
            }
          }
        }
      },
      "/api/clients/create-proc": {
        "post": {
          "tags": [
            "Clients"
          ],
          "summary": "Create client via stored procedure sp_create_client",
          "description": "Dynamically inspects parameters of app.sp_create_client and binds matching JSON body fields. Any OUTPUT params returned if present along with first recordset row.",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProcBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Client created (procedure result)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client": {
                            "type": "object",
                            "properties": {
                              "client_id": {
                                "type": "integer"
                              },
                              "name": {
                                "type": "string"
                              },
                              "is_active": {
                                "type": "boolean"
                              },
                              "logo_url": {
                                "type": "string",
                                "nullable": true
                              },
                              "created_utc": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          },
                          "proc_result": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/clients/fetch-from-url": {
        "post": {
          "tags": [
            "Clients"
          ],
          "summary": "Fetch and extract client data from a URL (e.g., LinkedIn)",
          "description": "Extracts client data from a URL and returns it in a format compatible with the create-proc endpoint",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "url"
                  ],
                  "properties": {
                    "url": {
                      "type": "string",
                      "description": "URL to fetch data from"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Extracted client data (compatible with create-proc endpoint)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "description": "Client name"
                          },
                          "logo_url": {
                            "type": "string",
                            "nullable": true,
                            "description": "Client logo URL"
                          },
                          "is_active": {
                            "type": "boolean",
                            "description": "Whether client should be active (defaults to true)"
                          },
                          "contacts_json": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ContactJsonItem"
                            },
                            "description": "Array of extracted contact objects"
                          },
                          "locations_json": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/LocationJsonItem"
                            },
                            "description": "Array of extracted location objects"
                          },
                          "industries_json": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/IndustryJsonItem"
                            },
                            "description": "Array of extracted industry associations"
                          },
                          "notes_json": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/NoteJsonItem"
                            },
                            "description": "Array of extracted note objects"
                          },
                          "contact_social_profiles_json": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/ContactSocialProfileJsonItem"
                            },
                            "description": "Array of extracted social profile objects"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/clients/{client_id}/setup": {
        "post": {
          "tags": [
            "Clients"
          ],
          "summary": "Orchestrate post-creation client setup (idempotent)",
          "parameters": [
            {
              "name": "client_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSetupBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Setup executed (idempotent)",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "client_slug": {
                            "type": "string"
                          },
                          "folders": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/client-tags": {
        "get": {
          "tags": [
            "ClientTags"
          ],
          "summary": "List client tags",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Tags list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ClientTag"
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "ClientTags"
          ],
          "summary": "Create client tag",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientTagCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Tag created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientTag"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/client-tags/{id}": {
        "get": {
          "tags": [
            "ClientTags"
          ],
          "summary": "Get client tag by id",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Tag details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientTag"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "ClientTags"
          ],
          "summary": "Update client tag (full replace)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientTagUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Tag updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientTag"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "ClientTags"
          ],
          "summary": "Delete client tag",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Tag deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "deleted": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/client-contacts": {
        "get": {
          "tags": [
            "ClientContacts"
          ],
          "summary": "List client contacts",
          "parameters": [
            {
              "name": "page",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1
              }
            },
            {
              "name": "limit",
              "in": "query",
              "schema": {
                "type": "integer",
                "minimum": 1
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Contacts list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ClientContact"
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "ClientContacts"
          ],
          "summary": "Create client contact",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientContactCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Contact created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientContact"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/client-contacts/{id}": {
        "get": {
          "tags": [
            "ClientContacts"
          ],
          "summary": "Get client contact by id",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Contact details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientContact"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "put": {
          "tags": [
            "ClientContacts"
          ],
          "summary": "Update client contact (full replace)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientContactUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Contact updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientContact"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "ClientContacts"
          ],
          "summary": "Update client contact (partial)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientContactUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Contact updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ClientContact"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "ClientContacts"
          ],
          "summary": "Delete client contact",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Contact deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "deleted": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/contact-social-profiles": {
        "get": {
          "tags": [
            "ContactSocialProfiles"
          ],
          "summary": "List contact social profiles",
          "responses": {
            "200": {
              "description": "Social profiles list",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ContactSocialProfile"
                        }
                      },
                      "meta": {
                        "$ref": "#/components/schemas/PageMeta"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "post": {
          "tags": [
            "ContactSocialProfiles"
          ],
          "summary": "Create contact social profile",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSocialProfileCreateBody"
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Social profile created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ContactSocialProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/contact-social-profiles/{id}": {
        "get": {
          "tags": [
            "ContactSocialProfiles"
          ],
          "summary": "Get contact social profile by id",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Social profile details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ContactSocialProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "tags": [
            "ContactSocialProfiles"
          ],
          "summary": "Update contact social profile (partial)",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSocialProfileUpdateBody"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Social profile updated",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "$ref": "#/components/schemas/ContactSocialProfile"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "delete": {
          "tags": [
            "ContactSocialProfiles"
          ],
          "summary": "Delete contact social profile",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Social profile deleted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "ok"
                        ]
                      },
                      "data": {
                        "type": "object",
                        "properties": {
                          "deleted": {
                            "type": "integer"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/api/ai/chat": {
      "post": {
        "summary": "Chat completion",
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "system",
                            "user",
                            "assistant"
                          ]
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "model": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assistant reply"
          }
        }
      }
    },
    "/api/ai/chat-stream": {
      "post": {
        "summary": "Chat completion (SSE stream)",
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "system",
                            "user",
                            "assistant"
                          ]
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "model": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Server-sent events stream"
          }
        }
      }
    },
    "/api/ai/assist": {
      "post": {
        "summary": "Tool-enabled assistant that can fetch server data",
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "messages"
                ],
                "properties": {
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "enum": [
                            "system",
                            "user",
                            "assistant"
                          ]
                        },
                        "content": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "model": {
                    "type": "string"
                  },
                  "temperature": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assistant reply with tool trace"
          }
        }
      }
    },
    "/api/ai/tag-suggest": {
      "post": {
        "summary": "Suggest tags for a note (reuse existing, propose few new)",
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "note"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "note": {
                    "type": "string"
                  },
                  "maxExisting": {
                    "type": "integer",
                    "description": "Max existing tags to suggest"
                  },
                  "maxNew": {
                    "type": "integer",
                    "description": "Max new tags to propose"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "existing": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tag_id": {
                                "type": "integer"
                              },
                              "tag_name": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "new": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tag_name": {
                                "type": "string"
                              },
                              "reason": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "rationale": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/ai/name-suggest": {
      "post": {
        "summary": "Suggest names for an engagement",
        "tags": [
          "AI"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "current_name"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "current_name": {
                    "type": "string"
                  },
                  "context": {
                    "type": "string"
                  },
                  "maxSuggestions": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Name suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "reason": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/audit-sipoc": {
      "get": {
        "summary": "List SIPOC docs",
        "tags": [
          "SIPOC"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SipocDoc"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/audit-sipoc/{audit_id}": {
      "get": {
        "summary": "Get SIPOC by audit_id",
        "tags": [
          "SIPOC"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "audit_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/SipocDoc"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Upsert SIPOC by audit_id",
        "tags": [
          "SIPOC"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "audit_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SipocDoc"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/SipocDoc"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/audits": {
      "get": {
        "summary": "List audits",
        "tags": [
          "Audits"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audits list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "audit_id": {
                            "type": "integer"
                          },
                          "engagement_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "title": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "string",
                            "nullable": true
                          },
                          "status": {
                            "type": "string"
                          },
                          "state": {
                            "type": "string"
                          },
                          "percent_complete": {
                            "type": "number"
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/billing/contracts": {
      "get": {
        "summary": "List contracts",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "active",
                "on_hold",
                "completed",
                "cancelled"
              ]
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "time_materials",
                "fixed_price",
                "milestone",
                "retainer",
                "prepaid"
              ]
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contracts list"
          }
        }
      },
      "post": {
        "summary": "Create contract",
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "org_id",
                  "client_id",
                  "engagement_id",
                  "contract_type",
                  "start_date"
                ],
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "client_id": {
                    "type": "integer"
                  },
                  "engagement_id": {
                    "type": "integer"
                  },
                  "contract_type": {
                    "type": "string"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "start_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "billing_terms": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contract created"
          }
        }
      }
    },
    "/api/billing/contracts/{id}": {
      "patch": {
        "summary": "Update contract status",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "active",
                      "on_hold",
                      "completed",
                      "cancelled"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated"
          }
        }
      }
    },
    "/api/billing/time-entries": {
      "get": {
        "summary": "List time entries",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "assignment_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "approved",
            "schema": {
              "type": "string",
              "enum": [
                true,
                false
              ]
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Time entries list"
          }
        }
      },
      "post": {
        "summary": "Create time entry",
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "org_id",
                  "assignment_id",
                  "hours",
                  "entry_date"
                ],
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "assignment_id": {
                    "type": "integer"
                  },
                  "hours": {
                    "type": "number"
                  },
                  "entry_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "description": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Time entry created"
          }
        }
      }
    },
    "/api/billing/time-entries/{id}/approve": {
      "patch": {
        "summary": "Approve time entry",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "user_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Time entry approved"
          }
        }
      }
    },
    "/api/billing/invoices": {
      "get": {
        "summary": "List invoices",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "sent",
                "viewed",
                "paid",
                "overdue",
                "cancelled"
              ]
            }
          },
          {
            "in": "query",
            "name": "contract_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoices list"
          }
        }
      },
      "post": {
        "summary": "Create invoice from approved time/milestones",
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "org_id",
                  "contract_id",
                  "start_date",
                  "end_date"
                ],
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "contract_id": {
                    "type": "integer"
                  },
                  "engagement_id": {
                    "type": "integer"
                  },
                  "start_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "end_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "due_date": {
                    "type": "string",
                    "format": "date"
                  },
                  "notes": {
                    "type": "string"
                  },
                  "po_number": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Invoice created"
          }
        }
      }
    },
    "/api/billing/invoices/{id}/status": {
      "patch": {
        "summary": "Update invoice status",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "sent",
                      "viewed",
                      "paid",
                      "overdue",
                      "cancelled"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated"
          }
        }
      }
    },
    "/api/billing/payments": {
      "post": {
        "summary": "Record payment",
        "tags": [
          "Billing"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "org_id",
                  "invoice_id",
                  "amount",
                  "payment_method"
                ],
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "invoice_id": {
                    "type": "integer"
                  },
                  "amount": {
                    "type": "number"
                  },
                  "currency": {
                    "type": "string"
                  },
                  "payment_method": {
                    "type": "string"
                  },
                  "payment_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "reference_number": {
                    "type": "string"
                  },
                  "notes": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment recorded"
          }
        }
      }
    },
    "/api/candidates/{id}/promote": {
      "post": {
        "summary": "Promote candidate to pursuit",
        "tags": [
          "Candidates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Pursuit created or returned (idempotent)"
          }
        }
      }
    },
    "/api/candidates": {
      "get": {
        "summary": "List candidates",
        "tags": [
          "Candidates"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidates list"
          }
        }
      },
      "post": {
        "summary": "Create candidate",
        "tags": [
          "Candidates"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "client_id": {
                    "type": "integer"
                  },
                  "contact_id": {
                    "type": "integer"
                  },
                  "title": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Candidate created"
          }
        }
      }
    },
    "/api/candidates/{candidate_id}": {
      "get": {
        "summary": "Get candidate",
        "tags": [
          "Candidates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "candidate_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Candidate"
          }
        }
      },
      "put": {
        "summary": "Update candidate",
        "tags": [
          "Candidates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "candidate_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated candidate"
          }
        }
      },
      "delete": {
        "summary": "Delete candidate",
        "tags": [
          "Candidates"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "candidate_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete result"
          }
        }
      }
    },
    "/api/client-contacts": {
      "get": {
        "summary": "List client contacts",
        "tags": [
          "ClientContacts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contact_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "first_name": {
                            "type": "string"
                          },
                          "last_name": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "is_primary": {
                            "type": "boolean"
                          },
                          "is_active": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client contact",
        "tags": [
          "ClientContacts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "is_primary": {
                    "type": "boolean"
                  },
                  "is_active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "contact_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-contacts/{id}": {
      "get": {
        "summary": "Get client contact by id",
        "tags": [
          "ClientContacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "contact_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client contact",
        "tags": [
          "ClientContacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },
                  "phone": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "is_primary": {
                    "type": "boolean"
                  },
                  "is_active": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Contact updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "contact_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "first_name": {
                          "type": "string"
                        },
                        "last_name": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "phone": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client contact",
        "tags": [
          "ClientContacts"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-documents": {
      "get": {
        "summary": "List client documents",
        "tags": [
          "ClientDocuments"
        ],
        "responses": {
          "200": {
            "description": "Documents list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "doc_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "doc_code": {
                            "type": "string"
                          },
                          "title": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client document",
        "tags": [
          "ClientDocuments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "doc_code"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "doc_code": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Document created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "doc_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "doc_code": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-documents/{id}": {
      "get": {
        "summary": "Get client document by id",
        "tags": [
          "ClientDocuments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Document",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "doc_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "doc_code": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client document",
        "tags": [
          "ClientDocuments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "doc_code": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Document updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "doc_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "doc_code": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client document",
        "tags": [
          "ClientDocuments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-engagements": {
      "get": {
        "summary": "List client engagements",
        "tags": [
          "ClientEngagements"
        ],
        "responses": {
          "200": {
            "description": "Engagements list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "engagement_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "title": {
                            "type": "string"
                          },
                          "start_date": {
                            "type": "string",
                            "nullable": true
                          },
                          "end_date": {
                            "type": "string",
                            "nullable": true
                          },
                          "status": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client engagement",
        "tags": [
          "ClientEngagements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "title"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "title": {
                    "type": "string"
                  },
                  "start_date": {
                    "type": "string",
                    "nullable": true
                  },
                  "end_date": {
                    "type": "string",
                    "nullable": true
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Engagement created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "engagement_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "title": {
                          "type": "string"
                        },
                        "start_date": {
                          "type": "string",
                          "nullable": true
                        },
                        "end_date": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-engagements/{id}": {
      "get": {
        "summary": "Get client engagement by id",
        "tags": [
          "ClientEngagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Engagement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "engagement_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "title": {
                          "type": "string"
                        },
                        "start_date": {
                          "type": "string",
                          "nullable": true
                        },
                        "end_date": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client engagement",
        "tags": [
          "ClientEngagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "start_date": {
                    "type": "string",
                    "nullable": true
                  },
                  "end_date": {
                    "type": "string",
                    "nullable": true
                  },
                  "status": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Engagement updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "engagement_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "title": {
                          "type": "string"
                        },
                        "start_date": {
                          "type": "string",
                          "nullable": true
                        },
                        "end_date": {
                          "type": "string",
                          "nullable": true
                        },
                        "status": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client engagement",
        "tags": [
          "ClientEngagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-integrations": {
      "get": {
        "summary": "List client integrations",
        "tags": [
          "ClientIntegrations"
        ],
        "responses": {
          "200": {
            "description": "Integrations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "integration_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "integration_code": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "config_json": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client integration",
        "tags": [
          "ClientIntegrations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "integration_code"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "integration_code": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "config_json": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Integration created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "integration_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "integration_code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "config_json": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-integrations/{id}": {
      "get": {
        "summary": "Get client integration by id",
        "tags": [
          "ClientIntegrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "integration_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "integration_code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "config_json": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client integration",
        "tags": [
          "ClientIntegrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "integration_code": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "config_json": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "integration_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "integration_code": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "config_json": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client integration",
        "tags": [
          "ClientIntegrations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-locations": {
      "get": {
        "summary": "List client locations",
        "tags": [
          "ClientLocations"
        ],
        "responses": {
          "200": {
            "description": "Locations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "location_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "address_line1": {
                            "type": "string"
                          },
                          "address_line2": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "state_province": {
                            "type": "string"
                          },
                          "postal_code": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "is_primary": {
                            "type": "boolean"
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client location",
        "tags": [
          "ClientLocations"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "label",
                  "line1"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "label": {
                    "type": "string"
                  },
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state_province": {
                    "type": "string"
                  },
                  "postal_code": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "is_primary": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "location_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "address_line1": {
                          "type": "string"
                        },
                        "address_line2": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "state_province": {
                          "type": "string"
                        },
                        "postal_code": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "is_primary": {
                          "type": "boolean"
                        },
                        "created_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-locations/{id}": {
      "get": {
        "summary": "Get client location by id",
        "tags": [
          "ClientLocations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "location_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "address_line1": {
                          "type": "string"
                        },
                        "address_line2": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "state_province": {
                          "type": "string"
                        },
                        "postal_code": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "is_primary": {
                          "type": "boolean"
                        },
                        "created_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client location",
        "tags": [
          "ClientLocations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string"
                  },
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "state_province": {
                    "type": "string"
                  },
                  "postal_code": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "is_primary": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "location_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "address_line1": {
                          "type": "string"
                        },
                        "address_line2": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "state_province": {
                          "type": "string"
                        },
                        "postal_code": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "is_primary": {
                          "type": "boolean"
                        },
                        "created_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client location",
        "tags": [
          "ClientLocations"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/{client_id}/notes": {
      "get": {
        "summary": "List notes for a client",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "note_type",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include_inactive",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "important_only",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClientNote"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client note",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientNoteCreateBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientNote"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/{client_id}/notes/{note_id}": {
      "get": {
        "summary": "Get client note by id",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientNote"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client note (full replace)",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientNoteUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientNote"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update client note (partial)",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientNoteUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientNote"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client note (soft delete)",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "note_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Note deleted"
          }
        }
      }
    },
    "/api/client-onboarding-tasks": {
      "get": {
        "summary": "List client onboarding tasks",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "client_id",
            "schema": {
              "type": "integer"
            },
            "description": "Filter by client"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            },
            "description": "Filter by status (e.g., open, done)"
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "description": "Search by name or description"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "task_id": {
                            "type": "integer"
                          },
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "description": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "due_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client onboarding task",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "name"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "due_utc": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "task_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "due_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-onboarding-tasks/{id}": {
      "get": {
        "summary": "Get client onboarding task by id",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "task_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "due_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client onboarding task",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "status": {
                    "type": "string"
                  },
                  "due_utc": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "task_id": {
                          "type": "integer"
                        },
                        "client_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string"
                        },
                        "due_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client onboarding task",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-onboarding-tasks/{id}/complete": {
      "post": {
        "summary": "Mark onboarding task complete",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated"
          }
        }
      }
    },
    "/api/client-onboarding-tasks/{id}/reopen": {
      "post": {
        "summary": "Reopen onboarding task",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task updated"
          }
        }
      }
    },
    "/api/client-onboarding-tasks/seed-from-pack": {
      "post": {
        "summary": "Seed onboarding tasks for a client from a task pack",
        "tags": [
          "ClientOnboardingTasks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "client_id",
                  "pack_code"
                ],
                "properties": {
                  "client_id": {
                    "type": "integer"
                  },
                  "pack_code": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tasks seeded"
          }
        }
      }
    },
    "/api/client-tag-map": {
      "get": {
        "summary": "List client->tag mappings",
        "tags": [
          "ClientTagMap"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Mappings list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "engagement_id": {
                            "type": "integer"
                          },
                          "tag_id": {
                            "type": "integer"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client->tag mapping",
        "tags": [
          "ClientTagMap"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "engagement_id",
                  "tag_id"
                ],
                "properties": {
                  "engagement_id": {
                    "type": "integer"
                  },
                  "tag_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Mapping created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "engagement_id": {
                          "type": "integer"
                        },
                        "tag_id": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client->tag mapping",
        "tags": [
          "ClientTagMap"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "engagement_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "tag_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-tags": {
      "get": {
        "summary": "List client tags",
        "tags": [
          "ClientTags"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tags list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tag_id": {
                            "type": "integer"
                          },
                          "tag_name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create client tag",
        "tags": [
          "ClientTags"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "tag_name"
                ],
                "properties": {
                  "tag_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tag_id": {
                          "type": "integer"
                        },
                        "tag_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/client-tags/{id}": {
      "get": {
        "summary": "Get client tag by id",
        "tags": [
          "ClientTags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tag_id": {
                          "type": "integer"
                        },
                        "tag_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update client tag",
        "tags": [
          "ClientTags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tag_name": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tag updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "tag_id": {
                          "type": "integer"
                        },
                        "tag_name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete client tag",
        "tags": [
          "ClientTags"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients": {
      "get": {
        "summary": "List clients",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "client_id": {
                            "type": "integer"
                          },
                          "name": {
                            "type": "string"
                          },
                          "is_active": {
                            "type": "boolean"
                          },
                          "logo_url": {
                            "type": "string",
                            "nullable": true
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/create-proc": {
      "post": {
        "summary": "Create client via stored procedure sp_create_client",
        "description": "Dynamically inspects parameters of app.sp_create_client and binds matching JSON body fields (strip leading @). Any OUTPUT params returned if present along with first recordset row.",
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true,
                "description": "Keys must match stored procedure parameter names without the leading @ symbol."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Client created (procedure result)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "client": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "proc_result": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/{client_id}/setup": {
      "post": {
        "summary": "Orchestrate post-creation client setup (idempotent)",
        "tags": [
          "Clients"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "playbook_code",
                  "owner_user_id"
                ],
                "properties": {
                  "client_name": {
                    "type": "string"
                  },
                  "playbook_code": {
                    "type": "string"
                  },
                  "owner_user_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Setup executed (idempotent)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "client_slug": {
                          "type": "string"
                        },
                        "folders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/fetch-from-url": {
      "post": {
        "summary": "Fetch and extract client data from a URL (e.g., LinkedIn)",
        "tags": [
          "Clients"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "url"
                ],
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "URL to fetch data from"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Extracted client data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "logo_url": {
                          "type": "string"
                        },
                        "contact": {
                          "type": "object",
                          "properties": {
                            "first_name": {
                              "type": "string"
                            },
                            "last_name": {
                              "type": "string"
                            },
                            "email": {
                              "type": "string"
                            },
                            "phone": {
                              "type": "string"
                            },
                            "title": {
                              "type": "string"
                            }
                          }
                        },
                        "location": {
                          "type": "object",
                          "properties": {
                            "city": {
                              "type": "string"
                            },
                            "state_province": {
                              "type": "string"
                            },
                            "country": {
                              "type": "string"
                            },
                            "postal_code": {
                              "type": "string"
                            }
                          }
                        },
                        "industry": {
                          "type": "string"
                        },
                        "notes": {
                          "type": "string"
                        },
                        "client_note": {
                          "type": "object",
                          "properties": {
                            "title": {
                              "type": "string"
                            },
                            "content": {
                              "type": "string"
                            },
                            "note_type": {
                              "type": "string"
                            }
                          }
                        },
                        "social_profiles": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contact-social-profiles": {
      "get": {
        "summary": "List contact social profiles",
        "tags": [
          "ContactSocialProfiles"
        ],
        "responses": {
          "200": {
            "description": "Profiles list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer"
                          },
                          "contact_id": {
                            "type": "integer"
                          },
                          "provider": {
                            "type": "string"
                          },
                          "profile_url": {
                            "type": "string"
                          },
                          "is_primary": {
                            "type": "boolean"
                          },
                          "created_utc": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "updated_utc": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        },
                        "total": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create contact social profile",
        "tags": [
          "ContactSocialProfiles"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "contact_id",
                  "provider",
                  "profile_url"
                ],
                "properties": {
                  "contact_id": {
                    "type": "integer"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "profile_url": {
                    "type": "string"
                  },
                  "is_primary": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Profile created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "contact_id": {
                          "type": "integer"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "profile_url": {
                          "type": "string"
                        },
                        "is_primary": {
                          "type": "boolean"
                        },
                        "created_utc": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/contact-social-profiles/{id}": {
      "get": {
        "summary": "Get contact social profile by id",
        "tags": [
          "ContactSocialProfiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "contact_id": {
                          "type": "integer"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "profile_url": {
                          "type": "string"
                        },
                        "is_primary": {
                          "type": "boolean"
                        },
                        "created_utc": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update contact social profile",
        "tags": [
          "ContactSocialProfiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "contact_id": {
                    "type": "integer"
                  },
                  "provider": {
                    "type": "string"
                  },
                  "profile_url": {
                    "type": "string"
                  },
                  "is_primary": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "contact_id": {
                          "type": "integer"
                        },
                        "provider": {
                          "type": "string"
                        },
                        "profile_url": {
                          "type": "string"
                        },
                        "is_primary": {
                          "type": "boolean"
                        },
                        "created_utc": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "updated_utc": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete contact social profile",
        "tags": [
          "ContactSocialProfiles"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/engagements": {
      "get": {
        "summary": "List engagements",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "string",
              "enum": [
                "project",
                "audit",
                "job"
              ]
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "on_hold",
                "completed",
                "cancelled"
              ]
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Engagement list"
          }
        }
      },
      "post": {
        "summary": "Create engagement",
        "tags": [
          "Engagements"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "org_id",
                  "client_id",
                  "type",
                  "name",
                  "owner_id",
                  "start_at"
                ],
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "client_id": {
                    "type": "integer"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "project",
                      "audit",
                      "job"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "owner_id": {
                    "type": "integer"
                  },
                  "start_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "due_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "contract_id": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Engagement created"
          }
        }
      }
    },
    "/api/engagements/{id}": {
      "patch": {
        "summary": "Update engagement status",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "active",
                      "on_hold",
                      "completed",
                      "cancelled"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status updated"
          }
        }
      }
    },
    "/api/engagements/{id}/features": {
      "post": {
        "summary": "Create feature",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "title"
                ],
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "priority": {
                    "type": "string",
                    "enum": [
                      "low",
                      "medium",
                      "high",
                      "critical"
                    ]
                  },
                  "due_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Feature created"
          }
        }
      }
    },
    "/api/engagements/{id}/features/{featureId}": {
      "patch": {
        "summary": "Update feature state",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "featureId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "state"
                ],
                "properties": {
                  "state": {
                    "type": "string",
                    "enum": [
                      "todo",
                      "in_progress",
                      "done"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feature updated"
          }
        }
      }
    },
    "/api/engagements/{id}/milestones": {
      "post": {
        "summary": "Create milestone",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "type",
                  "due_at"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "due_at": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Milestone created"
          }
        }
      }
    },
    "/api/engagements/{id}/dependencies": {
      "post": {
        "summary": "Create dependency",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "from_type",
                  "from_id",
                  "to_type",
                  "to_id",
                  "dep_type"
                ],
                "properties": {
                  "from_type": {
                    "type": "string"
                  },
                  "from_id": {
                    "type": "integer"
                  },
                  "to_type": {
                    "type": "string"
                  },
                  "to_id": {
                    "type": "integer"
                  },
                  "dep_type": {
                    "type": "string",
                    "enum": [
                      "FS",
                      "SS",
                      "FF",
                      "SF"
                    ]
                  },
                  "lag_days": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Dependency created"
          }
        }
      }
    },
    "/api/engagements/{id}/change-requests": {
      "post": {
        "summary": "Create change request",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "origin"
                ],
                "properties": {
                  "origin": {
                    "type": "string",
                    "enum": [
                      "client",
                      "internal"
                    ]
                  },
                  "scope_delta": {
                    "type": "string"
                  },
                  "hours_delta": {
                    "type": "number"
                  },
                  "value_delta": {
                    "type": "number"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Change request created"
          }
        }
      }
    },
    "/api/engagements/{id}/change-requests/{crId}": {
      "patch": {
        "summary": "Update change request status",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "crId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "status"
                ],
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "draft",
                      "submitted",
                      "approved",
                      "rejected"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change request updated"
          }
        }
      }
    },
    "/api/industries": {
      "get": {
        "summary": "List industries",
        "parameters": [
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include_inactive",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Industry"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create industry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndustryCreateBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/industries/{industry_id}": {
      "get": {
        "summary": "Get industry by id",
        "parameters": [
          {
            "in": "path",
            "name": "industry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update industry (full replace)",
        "parameters": [
          {
            "in": "path",
            "name": "industry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndustryUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update industry (partial)",
        "parameters": [
          {
            "in": "path",
            "name": "industry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IndustryUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/Industry"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete industry (soft delete)",
        "parameters": [
          {
            "in": "path",
            "name": "industry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Industry deleted"
          }
        }
      }
    },
    "/api/clients/{client_id}/industries": {
      "get": {
        "summary": "List industries for a client",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClientIndustry"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Add industry to client",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientIndustryCreateBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientIndustry"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients/{client_id}/industries/{industry_id}": {
      "put": {
        "summary": "Update client industry",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "industry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientIndustryUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientIndustry"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update client industry (partial)",
        "parameters": [
          {
            "in": "path",
            "name": "client_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "industry_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientIndustryUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/ClientIndustry"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/pursuits/{id}/stage": {
      "post": {
        "summary": "Change pursuit stage",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "to"
                ],
                "properties": {
                  "to": {
                    "type": "string",
                    "enum": [
                      "qual",
                      "pink",
                      "red",
                      "submit",
                      "won",
                      "lost"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Stage changed"
          }
        }
      }
    },
    "/api/pursuits/{id}/submit": {
      "post": {
        "summary": "Submit pursuit (send proposal)",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Submitted"
          }
        }
      }
    },
    "/api/pursuits/{id}/won": {
      "post": {
        "summary": "Mark pursuit as won",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Marked as won"
          }
        }
      }
    },
    "/api/pursuits/{id}/lost": {
      "post": {
        "summary": "Mark pursuit as lost",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reason": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Marked as lost"
          }
        }
      }
    },
    "/api/pursuits/{id}/proposals": {
      "post": {
        "summary": "Create new proposal version",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Proposal created"
          }
        }
      }
    },
    "/api/pursuits/proposals/{id}/send": {
      "post": {
        "summary": "Send proposal",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sent"
          }
        }
      }
    },
    "/api/pursuits": {
      "get": {
        "summary": "List pursuits",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "stage",
            "schema": {
              "type": "string",
              "enum": [
                "qual",
                "pink",
                "red",
                "submit",
                "won",
                "lost"
              ]
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pursuits list"
          }
        }
      },
      "post": {
        "summary": "Create pursuit",
        "tags": [
          "Pursuits"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "org_id",
                  "candidate_id",
                  "pursuit_stage"
                ],
                "properties": {
                  "org_id": {
                    "type": "integer"
                  },
                  "candidate_id": {
                    "type": "integer"
                  },
                  "pursuit_stage": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Pursuit created"
          }
        }
      }
    },
    "/api/pursuits/{pursuit_id}": {
      "get": {
        "summary": "Get pursuit",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "pursuit_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pursuit"
          }
        }
      },
      "put": {
        "summary": "Update pursuit",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "pursuit_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated pursuit"
          }
        }
      },
      "delete": {
        "summary": "Delete pursuit",
        "tags": [
          "Pursuits"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "pursuit_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Delete result"
          }
        }
      }
    },
    "/api/signals": {
      "get": {
        "summary": "List signals",
        "tags": [
          "Signals"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Signals list"
          }
        }
      }
    },
    "/api/task-packs": {
      "get": {
        "summary": "List task packs",
        "parameters": [
          {
            "in": "query",
            "name": "status_scope",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "prospect",
                "any"
              ]
            }
          },
          {
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "include_inactive",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskPack"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create task pack",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPackCreateBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskPack"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/task-packs/{pack_id}": {
      "get": {
        "summary": "Get task pack by id",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskPack"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update task pack (full replace)",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPackUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskPack"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update task pack (partial)",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskPackUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/TaskPack"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete task pack (soft delete)",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/task-packs/{pack_id}/tasks": {
      "get": {
        "summary": "List pack tasks",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PackTask"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create pack task",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackTaskCreateBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/PackTask"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/task-packs/{pack_id}/tasks/{pack_task_id}": {
      "get": {
        "summary": "Get pack task by id",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "pack_task_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/PackTask"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update pack task (full replace)",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "pack_task_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackTaskUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/PackTask"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update pack task (partial)",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "pack_task_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackTaskUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/PackTask"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete pack task (soft delete)",
        "parameters": [
          {
            "in": "path",
            "name": "pack_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "pack_task_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted"
          }
        }
      }
    },
    "/api/dashboard-stats": {
      "get": {
        "summary": "Get dashboard aggregate stats",
        "tags": [
          "Views"
        ],
        "responses": {
          "200": {
            "description": "Stats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "$ref": "#/components/schemas/DashboardStats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/audit-recent-touch": {
      "get": {
        "summary": "List recent audit activity",
        "tags": [
          "Views"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recent audits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/RecentAudit"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/clients-overview": {
      "get": {
        "summary": "List clients overview (aggregated stats & metadata)",
        "tags": [
          "Views"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Clients overview list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ClientsOverviewItem"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/fullenrich": {
      "post": {
        "summary": "FullEnrich webhook callback",
        "description": "Accepts enrichment results from FullEnrich and updates job + contact records.",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed"
          },
          "400": {
            "description": "Invalid payload"
          }
        }
      }
    },
    "/webhooks/graph": {
      "post": {
        "summary": "Microsoft Graph webhook callback",
        "description": "Handles email notifications from Microsoft Graph and syncs to comms threads",
        "tags": [
          "Webhooks"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed"
          },
          "400": {
            "description": "Invalid payload"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/workstream/stats": {
      "get": {
        "summary": "Workstream stats summary",
        "tags": [
          "Workstream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated counts"
          }
        }
      }
    },
    "/api/workstream/signals": {
      "get": {
        "summary": "Workstream signals (paged)",
        "tags": [
          "Workstream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged signals"
          }
        }
      }
    },
    "/api/workstream/today": {
      "get": {
        "summary": "Today panel (prioritized work)",
        "tags": [
          "Workstream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Today panel items"
          }
        }
      }
    },
    "/api/workstream/candidates": {
      "get": {
        "summary": "Workstream candidates (paged)",
        "tags": [
          "Workstream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged candidates"
          }
        }
      }
    },
    "/api/workstream/pursuits": {
      "get": {
        "summary": "Workstream pursuits (paged)",
        "tags": [
          "Workstream"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paged pursuits"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "summary": "Liveness",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "summary": "API health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/staffing-requests/{id}/rank": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Rank candidates for a staffing request",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "in": "query",
            "name": "include_rate_preview",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ranked candidates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "ok"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "person_id": {
                            "type": "integer"
                          },
                          "fit_score": {
                            "type": "number"
                          },
                          "reasons": {
                            "type": "array",
                            "items": {
                              "type": "object"
                            }
                          },
                          "modeled_rate": {
                            "$ref": "#/components/schemas/RateBreakdown"
                          }
                        }
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PageMeta"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/assignments": {
      "post": {
        "tags": [
          "People"
        ],
        "summary": "Create assignment with rate snapshot",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Assignment created"
          }
        }
      }
    },
    "/api/assignments/{id}": {
      "patch": {
        "tags": [
          "People"
        ],
        "summary": "Update assignment (non-snapshot fields)",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Assignment updated"
          }
        }
      },
      "delete": {
        "tags": [
          "People"
        ],
        "summary": "Delete assignment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Assignment deleted"
          }
        }
      }
    },
    "/api/rates/preview": {
      "get": {
        "tags": [
          "People"
        ],
        "summary": "Resolve effective rate with breakdown",
        "parameters": [
          {
            "in": "query",
            "name": "org_id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "role_template_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "level",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "skills",
            "schema": {
              "type": "string",
              "description": "Comma-separated skill IDs"
            }
          },
          {
            "in": "query",
            "name": "engagement_id",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "as_of",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rate preview",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateBreakdown"
                }
              }
            }
          }
        }
      }
    }
  }
}
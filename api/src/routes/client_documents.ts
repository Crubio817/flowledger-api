import { Router } from 'express';
import { getPool, sql } from '../db/pool';
import { asyncHandler, badRequest, ok, listOk, notFound } from '../utils/http';
import { ClientDocumentCreate, ClientDocumentUpdate } from '../validation/schemas';

const router = Router();
router.get('/', asyncHandler(async (req, res) => { const { page, limit, offset } = (await import('../utils/http')).getPagination(req); const pool = await getPool(); const r = await pool.request().input('offset', sql.Int, offset).input('limit', sql.Int, limit).query(`SELECT doc_id, client_id, doc_code, title, status FROM app.client_documents ORDER BY doc_id OFFSET @offset ROWS FETCH NEXT @limit ROWS ONLY`); listOk(res, r.recordset, { page, limit, total: r.recordset.length }); }));
router.get('/:id', asyncHandler(async (req, res) => { const id = Number(req.params.id); if (Number.isNaN(id)) return badRequest(res,'id must be int'); const pool = await getPool(); const r = await pool.request().input('id', sql.Int, id).query(`SELECT doc_id, client_id, doc_code, title, status FROM app.client_documents WHERE doc_id=@id`); const row = r.recordset[0]; if (!row) return notFound(res); ok(res, row); }));
router.post('/', asyncHandler(async (req, res) => { const parsed = ClientDocumentCreate.safeParse(req.body); if (!parsed.success) return badRequest(res, parsed.error.issues.map(i=>i.message).join('; ')); const { client_id, doc_code, title = null, status = 'placeholder' } = parsed.data; const pool = await getPool(); await pool.request().input('client_id', sql.Int, client_id).input('doc_code', sql.NVarChar(80), doc_code).input('title', sql.NVarChar(200), title).input('status', sql.NVarChar(40), status).query(`INSERT INTO app.client_documents (client_id, doc_code, title, status) VALUES (@client_id, @doc_code, @title, @status)`); const read = await pool.request().query(`SELECT TOP 1 doc_id, client_id, doc_code, title, status FROM app.client_documents ORDER BY doc_id DESC`); ok(res, read.recordset[0], 201); }));
router.put('/:id', asyncHandler(async (req, res) => { const id = Number(req.params.id); if (Number.isNaN(id)) return badRequest(res,'id must be int'); const parsed = ClientDocumentUpdate.safeParse(req.body); if (!parsed.success) return badRequest(res, parsed.error.issues.map(i=>i.message).join('; ')); const data = parsed.data; const sets: string[] = []; const pool = await getPool(); const request = pool.request().input('id', sql.Int, id); if (data.doc_code !== undefined) { sets.push('doc_code=@doc_code'); request.input('doc_code', sql.NVarChar(80), data.doc_code); } if (data.title !== undefined) { sets.push('title=@title'); request.input('title', sql.NVarChar(200), data.title); } if (data.status !== undefined) { sets.push('status=@status'); request.input('status', sql.NVarChar(40), data.status); } if (!sets.length) return badRequest(res,'No fields to update'); const result = await request.query(`UPDATE app.client_documents SET ${sets.join(', ')} WHERE doc_id=@id`); if (result.rowsAffected[0]===0) return notFound(res); const read = await pool.request().input('id', sql.Int, id).query(`SELECT doc_id, client_id, doc_code, title, status FROM app.client_documents WHERE doc_id=@id`); ok(res, read.recordset[0]); }));
router.delete('/:id', asyncHandler(async (req, res) => { const id = Number(req.params.id); if (Number.isNaN(id)) return badRequest(res,'id must be int'); const pool = await getPool(); const r = await pool.request().input('id', sql.Int, id).query(`DELETE FROM app.client_documents WHERE doc_id=@id`); if (r.rowsAffected[0]===0) return notFound(res); ok(res, { deleted: r.rowsAffected[0] }); }));
export default router;

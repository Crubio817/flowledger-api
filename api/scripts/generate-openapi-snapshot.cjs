// Generate OpenAPI snapshot without starting the server
// Reads TypeScript route annotations via swagger-jsdoc
const fs = require('fs');
const path = require('path');
const swaggerJSDoc = require('swagger-jsdoc');

function buildOptions() {
  const cwd = process.cwd();
  try {
    // Prefer the compiled openapi options to retain components/schemas
    const mod = require(path.resolve(cwd, 'dist', 'src', 'docs', 'openapi.js'));
    if (mod && typeof mod.buildOpenApiOptions === 'function') {
      const opts = mod.buildOpenApiOptions();
      // Ensure we scan both TS (for dev) and JS (for dist)
      opts.apis = [
        path.resolve(cwd, 'src', '**', '*.ts'),
        path.resolve(cwd, 'dist', '**', '*.js')
      ];
      return opts;
    }
  } catch (e) {
    // fall through to minimal options
  }
  // Fallback minimal options (less complete)
  const apis = [
    path.resolve(cwd, 'src', '**', '*.ts'),
    path.resolve(cwd, 'dist', '**', '*.js')
  ];
  return {
    apis,
    definition: {
      openapi: '3.0.3',
      info: {
        title: 'FlowLedger API',
        version: require(path.resolve(cwd, 'package.json')).version || '0.1.0',
        description: 'FlowLedger API â€” autogenerated snapshot'
      },
      servers: [
        { url: '/', description: 'Relative to current host' }
      ]
    }
  };
}

function main() {
  const options = buildOptions();
  const spec = swaggerJSDoc(options);
  // Merge additions if present (docs-only endpoints)
  try {
    const addPath = path.resolve(process.cwd(), 'openapi.additions.json');
    if (fs.existsSync(addPath)) {
      const addRaw = fs.readFileSync(addPath, 'utf8');
      const adds = JSON.parse(addRaw);
      spec.paths = Object.assign({}, spec.paths || {}, adds.paths || {});
      if (adds.components && adds.components.schemas) {
        spec.components = spec.components || {};
        spec.components.schemas = Object.assign({}, spec.components.schemas || {}, adds.components.schemas || {});
      }
      console.log('Merged additions from', addPath);
    }
  } catch (e) {
    console.warn('Failed to merge additions:', e.message || e);
  }
  const outApi = path.resolve(process.cwd(), 'openapi.snapshot.json');
  const outFront = path.resolve(process.cwd(), '..', 'frontend-integration-package', 'openapi.snapshot.json');
  fs.writeFileSync(outApi, JSON.stringify(spec, null, 2));
  console.log('Wrote', outApi);
  try {
    fs.writeFileSync(outFront, JSON.stringify(spec, null, 2));
    console.log('Wrote', outFront);
  } catch (e) {
    console.warn('Could not write frontend snapshot:', e.message || e);
  }
}

main();

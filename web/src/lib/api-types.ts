/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/audit-sipoc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List SIPOC docs */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["SipocDoc"][];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit-sipoc/{audit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get SIPOC by audit_id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["SipocDoc"];
                        };
                    };
                };
            };
        };
        /** Upsert SIPOC by audit_id */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SipocDoc"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["SipocDoc"];
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List audits */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Audits list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: {
                                audit_id?: number;
                                client_id?: number;
                                title?: string;
                                scope?: string | null;
                                status?: string;
                                /** Format: date-time */
                                created_utc?: string;
                                /** Format: date-time */
                                updated_utc?: string;
                            }[];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        /** Create audit */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        audit_id: number;
                        client_id: number;
                        title: string;
                        scope?: string | null;
                        status?: string;
                    };
                };
            };
            responses: {
                /** @description Audit created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: {
                                audit_id?: number;
                                client_id?: number;
                                title?: string;
                                scope?: string | null;
                                status?: string;
                                /** Format: date-time */
                                created_utc?: string;
                                /** Format: date-time */
                                updated_utc?: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audits/{audit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get audit by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: {
                                audit_id?: number;
                                client_id?: number;
                                title?: string;
                                scope?: string | null;
                                status?: string;
                                /** Format: date-time */
                                created_utc?: string;
                                /** Format: date-time */
                                updated_utc?: string;
                            };
                        };
                    };
                };
            };
        };
        /** Update audit */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        title?: string;
                        scope?: string | null;
                        status?: string;
                    };
                };
            };
            responses: never;
        };
        post?: never;
        /** Delete audit */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List clients */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Clients list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: {
                                client_id?: number;
                                name?: string;
                                is_active?: boolean;
                                /** Format: date-time */
                                created_utc?: string;
                            }[];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/findings/{audit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get findings by audit_id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["Finding"];
                        };
                    };
                };
            };
        };
        /** Upsert findings by audit_id */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    audit_id: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Finding"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["Finding"];
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/interview-responses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List interview responses */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["InterviewResponse"][];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/interviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List interviews */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                    sort?: string;
                    order?: "ASC" | "DESC";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["Interview"][];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/process-maps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List process maps */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["ProcessMap"][];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/process-maps/upload-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get pre-signed upload URL for a process map file (stub) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        audit_id: number;
                        filename: string;
                        contentType: string;
                    };
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["UploadUrlResponse"];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard-stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get dashboard aggregate stats */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Stats */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["DashboardStats"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/audit-recent-touch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List recent audit activity */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recent audits */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["RecentAudit"][];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/clients-overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List clients overview (aggregated stats & metadata) */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Clients overview list */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status?: "ok";
                            data?: components["schemas"]["ClientsOverviewItem"][];
                            meta?: components["schemas"]["PageMeta"];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** API health */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorEnvelope: {
            error: {
                code: string;
                message: string;
            };
        };
        PageMeta: {
            page: number;
            limit: number;
            total?: number;
        };
        DashboardStats: {
            active_clients?: number;
            audits_in_progress?: number;
            sipocs_completed?: number;
            pending_interviews?: number;
        };
        RecentAudit: {
            audit_id: number;
            client_id: number;
            title: string;
            status: string;
            /** Format: date-time */
            last_touched_utc: string;
        };
        SipocDoc: {
            suppliers_json?: string[];
            inputs_json?: string[];
            process_json?: string[];
            outputs_json?: string[];
            customers_json?: string[];
            metrics_json?: {
                [key: string]: unknown;
            };
        };
        Interview: {
            interview_id: number;
            audit_id: number;
            persona: string;
            mode?: string;
            /** Format: date-time */
            scheduled_utc?: string | null;
            status?: string;
            notes?: string | null;
            /** Format: date-time */
            created_utc?: string;
            /** Format: date-time */
            updated_utc?: string;
        };
        InterviewResponse: {
            response_id: number;
            interview_id: number;
            question_id: string;
            answer: string;
            /** Format: date-time */
            created_utc?: string;
        };
        Finding: {
            audit_id: number;
            pain_points_json?: string[];
            opportunities_json?: string[];
            recommendations_json?: string[];
            /** Format: date-time */
            updated_utc?: string;
        };
        ProcessMap: {
            process_map_id: number;
            audit_id: number;
            title?: string | null;
            blob_path: string;
            file_type?: string | null;
            /** Format: date-time */
            uploaded_utc?: string;
        };
        UploadUrlResponse: {
            uploadUrl: string;
            blob_path: string;
            contentType: string;
        };
        ClientsOverviewItem: {
            client_id: number;
            client_name: string;
            is_active: boolean;
            /** Format: date-time */
            created_utc: string;
            primary_contact_name?: string | null;
            primary_contact_email?: string | null;
            /** @description Comma-delimited or JSON string of tags */
            tags?: string | null;
            engagement_count?: number;
            pending_onboarding_tasks?: number;
            /** Format: date-time */
            last_activity_utc?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
